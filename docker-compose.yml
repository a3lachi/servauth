services:
  postgres:
    image: postgres:16-alpine
    container_name: auth-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: auth-server
    environment:
      PORT: ${PORT}
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      DRIZZLE_KIT_CONFIRM: "yes"
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Pushing database schema directly...' &&
        echo 'y' | timeout 60 bun run db:push || echo 'Schema push completed or failed, continuing...' &&
        echo 'Starting server...' &&
        bun run start
      "

volumes:
  postgres_data:

networks:
  auth-network:
    driver: bridge